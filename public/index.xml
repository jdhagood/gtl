<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Landing Page on GTL Python</title>
    <link>https://gtlpython.click/</link>
    <description>Recent content in Landing Page on GTL Python</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 02 Jan 2025 19:19:33 -0600</lastBuildDate>
    <atom:link href="https://gtlpython.click/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Minesweeper</title>
      <link>https://gtlpython.click/minesweeper/</link>
      <pubDate>Thu, 02 Jan 2025 19:19:33 -0600</pubDate>
      <guid>https://gtlpython.click/minesweeper/</guid>
      <description>&lt;h1 id=&#34;humble-beginnings&#34;&gt;Humble Beginnings&lt;/h1&gt;&#xA;&lt;p&gt;&lt;style&gt;&#xD;&#xA;    .soft {&#xD;&#xA;        width: 600px;&#xD;&#xA;        border-radius: 10px;&#xD;&#xA;        display: block;&#xD;&#xA;        margin: 0 auto;  &#xD;&#xA;    }&#xD;&#xA;    .image-container {&#xD;&#xA;        text-align: center;&#xD;&#xA;        margin: 20px 0;  &#xD;&#xA;    }&#xD;&#xA;    .caption {&#xD;&#xA;        font-size: 0.9em;&#xD;&#xA;        color: #555;  &#xD;&#xA;        margin-top: 10px;&#xD;&#xA;    }&#xD;&#xA;    .caption a {&#xD;&#xA;        color: #007BFF;  &#xD;&#xA;        text-decoration: none;  &#xD;&#xA;    }&#xD;&#xA;    .caption a:hover {&#xD;&#xA;        text-decoration: underline;  &#xD;&#xA;    }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;image-container&#34;&gt;&#xD;&#xA;    &lt;img src=&#34;https://gtlpython.click/img/minesweeper/minesweeper.jpg&#34; class=&#34;soft&#34; alt=&#34;Soft-styled image&#34;&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;div class=&#34;caption&#34;&gt;&#xD;&#xA;        Windows XP is before even my time&amp;hellip;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xA;Minesweeper is a puzzle game that came out around the 1990s as a game for personal computers. If you are not familiar with the game I invite you to Google &amp;lsquo;minesweeper&amp;rsquo; and play Google&amp;rsquo;s version of the game.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Your Instructor</title>
      <link>https://gtlpython.click/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/about/</guid>
      <description>&lt;p&gt;Hello world, my name is JD Hagood, and I will be your instructor for this introduction to python class! I am looking forward to meeting everyone and teaching my favorite programming language!&lt;/p&gt;&#xA;&lt;h1 id=&#34;where-am-i-from&#34;&gt;Where am I from?&lt;/h1&gt;&#xA;&lt;p&gt;&lt;style&gt;&#xD;&#xA;    .soft {&#xD;&#xA;        width: 600px;&#xD;&#xA;        border-radius: 10px;&#xD;&#xA;        display: block;&#xD;&#xA;        margin: 0 auto;  &#xD;&#xA;    }&#xD;&#xA;    .image-container {&#xD;&#xA;        text-align: center;&#xD;&#xA;        margin: 20px 0;  &#xD;&#xA;    }&#xD;&#xA;    .caption {&#xD;&#xA;        font-size: 0.9em;&#xD;&#xA;        color: #555;  &#xD;&#xA;        margin-top: 10px;&#xD;&#xA;    }&#xD;&#xA;    .caption a {&#xD;&#xA;        color: #007BFF;  &#xD;&#xA;        text-decoration: none;  &#xD;&#xA;    }&#xD;&#xA;    .caption a:hover {&#xD;&#xA;        text-decoration: underline;  &#xD;&#xA;    }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;image-container&#34;&gt;&#xD;&#xA;    &lt;img src=&#34;https://gtlpython.click/img/about/family.jpg&#34; class=&#34;soft&#34; alt=&#34;Soft-styled image&#34;&gt;&#xD;&#xA;    &#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xA;&lt;style&gt;&#xD;&#xA;    .soft {&#xD;&#xA;        width: 600px;&#xD;&#xA;        border-radius: 10px;&#xD;&#xA;        display: block;&#xD;&#xA;        margin: 0 auto;  &#xD;&#xA;    }&#xD;&#xA;    .image-container {&#xD;&#xA;        text-align: center;&#xD;&#xA;        margin: 20px 0;  &#xD;&#xA;    }&#xD;&#xA;    .caption {&#xD;&#xA;        font-size: 0.9em;&#xD;&#xA;        color: #555;  &#xD;&#xA;        margin-top: 10px;&#xD;&#xA;    }&#xD;&#xA;    .caption a {&#xD;&#xA;        color: #007BFF;  &#xD;&#xA;        text-decoration: none;  &#xD;&#xA;    }&#xD;&#xA;    .caption a:hover {&#xD;&#xA;        text-decoration: underline;  &#xD;&#xA;    }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;image-container&#34;&gt;&#xD;&#xA;    &lt;img src=&#34;https://gtlpython.click/img/about/home.jpg&#34; class=&#34;soft&#34; alt=&#34;Soft-styled image&#34;&gt;&#xD;&#xA;    &#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&#xA;I grew up in Clinton, Mississippi, USA  with my parents and older sister. I attended a local highschool until my junior year and transferred to a public math and science magnet boarding school in the northern part of the state.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Audio Processing</title>
      <link>https://gtlpython.click/audioprocessing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/audioprocessing/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;In this lab we will perform manipulations on audio files to produce some cool effects. Before we can start let&amp;rsquo;s talk about how sound is stored on a computer.&lt;/p&gt;&#xA;&lt;p&gt;When you use a microphone to record a sound, it measures the electrical signal from a transducer which is proportial to the pressure at the transducer many times a second. This produces a list of numbers, called samples (both positive, zero, and negative), corresponding to the pressue at a certain time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary Search</title>
      <link>https://gtlpython.click/binarysearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/binarysearch/</guid>
      <description>&lt;h1 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h1&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s review conditionals from the pset.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement in python has a simple syntax structure.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; CONDITION:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CODE_TO_RUN_IF_CONDITION_IS_TRUE&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CODE_AFTER_IF_STATEMENT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CONDITION&lt;/code&gt; is a boolean expression. A boolean expression is a piece of code that returns &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; when it is executed. Below are a couple of boolean expressions with numbers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cellular Atomata</title>
      <link>https://gtlpython.click/cellular_atomata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/cellular_atomata/</guid>
      <description>&lt;h1 id=&#34;for-loops-with-range&#34;&gt;For loops with range&lt;/h1&gt;&#xA;&lt;p&gt;For loops are very versitile. In their most basic use case, they allow you to repeat a block of code mutliple times. We have seen them in this course before but it is worth going over them again.&lt;/p&gt;&#xA;&lt;p&gt;Suppose you wanted to &amp;ldquo;hello&amp;rdquo; to the terminal 5 times. You could naively run the python script&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>DFS</title>
      <link>https://gtlpython.click/dfs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/dfs/</guid>
      <description>&lt;h1 id=&#34;sets&#34;&gt;Sets&lt;/h1&gt;&#xA;&lt;p&gt;If you have have so much as dipped your toes in higher level math, you have likely heard about sets. All of modern math is built on top of sets.&#xA;In math a set is an unordered collection of objects. Sets can be constructed to hold &lt;em&gt;almost&lt;/em&gt; anything anything from numbers to functions to cats and dogs to other sets (&lt;a href=&#34;https://en.wikipedia.org/wiki/Russell%27s_paradox&#34;&gt;Russel&lt;/a&gt; has entered the chat).&lt;/p&gt;&#xA;&lt;p&gt;In python we can create a set using curly braces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enviroment Model</title>
      <link>https://gtlpython.click/environment_model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/environment_model/</guid>
      <description>&lt;h1 id=&#34;the-environment-diagram&#34;&gt;The Environment Diagram&lt;/h1&gt;&#xA;&lt;p&gt;When you are programming in any language, it is important to have a mental model of what you are doing. If you are blindly executing code and run into a bug, it can be nearly impossible to figure out how to fix it on your own if you are not aware of what exactly you are writing. Environment diagrams help demystify many confusing aspects of Python and shine light on why many of the things in Python are done the way they are. This will be a topic that we come back to many times throughout the course as we develop more advanced skills.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ESP32 AP</title>
      <link>https://gtlpython.click/esp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/esp/</guid>
      <description>&lt;p&gt;A simple example program to set up an ESP32 as an Access Point to server a webpage to control an LED on an local wireless network.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; network  &lt;span style=&#34;color:#78787e&#34;&gt;# Import the network module to set up Wi-Fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; socket   &lt;span style=&#34;color:#78787e&#34;&gt;# Import the socket module for handling HTTP requests&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;import&lt;/span&gt; machine  &lt;span style=&#34;color:#78787e&#34;&gt;# Import the machine module for controlling hardware&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;led &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; machine&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;Pin(&lt;span style=&#34;color:#ff9f43&#34;&gt;14&lt;/span&gt;, machine&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;Pin&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;OUT)  &lt;span style=&#34;color:#78787e&#34;&gt;# Create a Pin object for the LED, set as output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# Configure the ESP32 as an Access Point (AP)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssid &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;ESP32-AP&amp;#34;&lt;/span&gt;          &lt;span style=&#34;color:#78787e&#34;&gt;# Wi-Fi network name (SSID); Change this to something unique&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;password &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;12345678&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#78787e&#34;&gt;# Password for the Wi-Fi network (must be at least 8 characters); Change this to something unique&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# Create an Access Point instance&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ap &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; network&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;WLAN(network&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;AP_IF)  &lt;span style=&#34;color:#78787e&#34;&gt;# Create a WLAN object in AP mode&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ap&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;active(&lt;span style=&#34;color:#ff6ac1&#34;&gt;True&lt;/span&gt;)                   &lt;span style=&#34;color:#78787e&#34;&gt;# Activate the Access Point&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ap&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;config(essid&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;ssid, password&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;password)  &lt;span style=&#34;color:#78787e&#34;&gt;# Set the SSID and password for the AP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# Print the Access Point details&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;Access Point active. Connect to Wi-Fi: &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;{&lt;/span&gt;ssid&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;, Password: &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;{&lt;/span&gt;password&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;IP address: &lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;{&lt;/span&gt;ap&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;ifconfig()[&lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#5af78e&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#78787e&#34;&gt;# Print the AP&amp;#39;s IP address (default: 192.168.4.1)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# HTML content for the webpage&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# This is the basic HTML page served by the ESP32, with buttons to control the LED&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;html &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;html&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;head&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;title&amp;gt;LED Control&amp;lt;/title&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;style&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;        body { font-family: Arial; text-align: center; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;        button { padding: 20px; margin: 10px; font-size: 20px; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;/style&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;/head&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;body&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;h1&amp;gt;ESP32 LED Control&amp;lt;/h1&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;button onclick=&amp;#34;toggleLED(&amp;#39;on&amp;#39;)&amp;#34;&amp;gt;Turn LED ON&amp;lt;/button&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;button onclick=&amp;#34;toggleLED(&amp;#39;off&amp;#39;)&amp;#34;&amp;gt;Turn LED OFF&amp;lt;/button&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;script&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;        // JavaScript function to send LED control requests&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;        function toggleLED(state) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;            fetch(&amp;#39;/led?state=&amp;#39; + state);  // Send a GET request to the ESP32 with the LED state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;    &amp;lt;/script&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;/body&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;lt;/html&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# This function returns the HTML content when the ESP32 receives a request&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;web_page&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; html&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# Start a socket server to listen for incoming connections&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;addr &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;getaddrinfo(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ff9f43&#34;&gt;80&lt;/span&gt;)[&lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color:#ff6ac1&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;]  &lt;span style=&#34;color:#78787e&#34;&gt;# Get address info for the server&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;socket()                              &lt;span style=&#34;color:#78787e&#34;&gt;# Create a socket object&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;bind(addr)                                     &lt;span style=&#34;color:#78787e&#34;&gt;# Bind the socket to the address and port&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;s&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;listen(&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;)                                      &lt;span style=&#34;color:#78787e&#34;&gt;# Start listening for connections (max 1 client at a time)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Listening on&amp;#39;&lt;/span&gt;, addr)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#78787e&#34;&gt;# Main loop to handle client requests&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;True&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;# Accept a new connection from a client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn, addr &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; s&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;accept()  &lt;span style=&#34;color:#78787e&#34;&gt;# Wait for a client to connect&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Connection from&amp;#39;&lt;/span&gt;, addr)  &lt;span style=&#34;color:#78787e&#34;&gt;# Print the client&amp;#39;s address&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;# Receive the client&amp;#39;s HTTP request&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    request &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; conn&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ff9f43&#34;&gt;1024&lt;/span&gt;)  &lt;span style=&#34;color:#78787e&#34;&gt;# Receive up to 1024 bytes of data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    request &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff5c57&#34;&gt;str&lt;/span&gt;(request)     &lt;span style=&#34;color:#78787e&#34;&gt;# Convert the request to a string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;Request:&amp;#39;&lt;/span&gt;, request) &lt;span style=&#34;color:#78787e&#34;&gt;# Print the HTTP request for debugging&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;# Check the request for LED control commands&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;/led?state=on&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; request:  &lt;span style=&#34;color:#78787e&#34;&gt;# If the request contains &amp;#39;state=on&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        led&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;value(&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;)                &lt;span style=&#34;color:#78787e&#34;&gt;# Turn the LED ON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;LED turned ON&amp;#34;&lt;/span&gt;)      &lt;span style=&#34;color:#78787e&#34;&gt;# Print confirmation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#39;/led?state=off&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;in&lt;/span&gt; request: &lt;span style=&#34;color:#78787e&#34;&gt;# If the request contains &amp;#39;state=off&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        led&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;value(&lt;span style=&#34;color:#ff9f43&#34;&gt;0&lt;/span&gt;)                &lt;span style=&#34;color:#78787e&#34;&gt;# Turn the LED OFF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff5c57&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;LED turned OFF&amp;#34;&lt;/span&gt;)     &lt;span style=&#34;color:#78787e&#34;&gt;# Print confirmation&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;# Serve the webpage&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    response &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; web_page()  &lt;span style=&#34;color:#78787e&#34;&gt;# Get the HTML content&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#78787e&#34;&gt;# Send the HTTP response to the client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;send(&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;HTTP/1.1 200 OK&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;Content-Type: text/html&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;\r\n\r\n&lt;/span&gt;&lt;span style=&#34;color:#5af78e&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff6ac1&#34;&gt;+&lt;/span&gt; response)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;close()           &lt;span style=&#34;color:#78787e&#34;&gt;# Close the connection to the client&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Generators</title>
      <link>https://gtlpython.click/generators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/generators/</guid>
      <description>&lt;h1 id=&#34;reimplementing-range&#34;&gt;Reimplementing range&lt;/h1&gt;&#xA;&lt;p&gt;Suppose we wanted to reimplement python&amp;rsquo;s range function. To do so we may naïvely implement a function that retuns a list of numbers in our desired range like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e2e4e5;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff6ac1&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#57c7ff&#34;&gt;list_range&lt;/span&gt;(start, stop, step&lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;assert&lt;/span&gt; step &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff9f43&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    out &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    current &lt;span style=&#34;color:#ff6ac1&#34;&gt;=&lt;/span&gt; start&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;while&lt;/span&gt; current &lt;span style=&#34;color:#ff6ac1&#34;&gt;&amp;lt;&lt;/span&gt; stop:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        out&lt;span style=&#34;color:#ff6ac1&#34;&gt;.&lt;/span&gt;append(current)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        current &lt;span style=&#34;color:#ff6ac1&#34;&gt;+=&lt;/span&gt; step&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff6ac1&#34;&gt;return&lt;/span&gt; out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Hangman</title>
      <link>https://gtlpython.click/hangman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/hangman/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s implement a simple game of hangman. If you are not familiar with this game, it is a word guessing game. A starting word is chosen, generally by another person, but in our case from a random list. You always know how many letters are in this word and you take turns guessing letters in the word. If the letter you guessed is in the word, then the letter position(s) in the word are revealed to you. If the letter you guessed is not in the word, then you lose a life. You have a limited number of lives.&lt;/p&gt;</description>
    </item>
    <item>
      <title>hello, world</title>
      <link>https://gtlpython.click/hello_world/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/hello_world/</guid>
      <description>&lt;h1 id=&#34;translation&#34;&gt;Translation&lt;/h1&gt;&#xA;&lt;p&gt;Everything on this website is written in English, which may make learning Python harder than it has to be. If you would rather not read English and are using Google Chrome, I recommend the extension &amp;ldquo;Immersive Translate&amp;rdquo; that will translate webpages for you.&#xA;&lt;style&gt;&#xD;&#xA;    .soft {&#xD;&#xA;        width: 600px;&#xD;&#xA;        border-radius: 10px;&#xD;&#xA;        display: block;&#xD;&#xA;        margin: 0 auto;  &#xD;&#xA;    }&#xD;&#xA;    .image-container {&#xD;&#xA;        text-align: center;&#xD;&#xA;        margin: 20px 0;  &#xD;&#xA;    }&#xD;&#xA;    .caption {&#xD;&#xA;        font-size: 0.9em;&#xD;&#xA;        color: #555;  &#xD;&#xA;        margin-top: 10px;&#xD;&#xA;    }&#xD;&#xA;    .caption a {&#xD;&#xA;        color: #007BFF;  &#xD;&#xA;        text-decoration: none;  &#xD;&#xA;    }&#xD;&#xA;    .caption a:hover {&#xD;&#xA;        text-decoration: underline;  &#xD;&#xA;    }&#xD;&#xA;&lt;/style&gt;&#xD;&#xA;&#xD;&#xA;&lt;div class=&#34;image-container&#34;&gt;&#xD;&#xA;    &lt;img src=&#34;https://gtlpython.click/img/hello_world/translate.jpg&#34; class=&#34;soft&#34; alt=&#34;Soft-styled image&#34;&gt;&#xD;&#xA;    &#xD;&#xA;&lt;/div&gt;&#xD;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recursion</title>
      <link>https://gtlpython.click/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/recursion/</guid>
      <description>&lt;p&gt;Recursion is one of the most useful tools that a programmer can have in their toolbelt. It can lead to very elegant solutions to problems that seem large or complicated at first by breaking it down into smaller pieces that can be more easily computed. Once you get the hang of it, you will also likely agree that the recursive programs are easier to understand. Let&amp;rsquo;s learn how to harness this power in python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>sketchpad</title>
      <link>https://gtlpython.click/sketchpad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://gtlpython.click/sketchpad/</guid>
      <description>&lt;p&gt;Hello, my name is JD, and I will be your instructor for this introduction to python class! I am looking forward to meeting everyone and teaching my favorite programming language: python.&lt;/p&gt;&#xA;&lt;h1 id=&#34;where-am-i-from&#34;&gt;Where am I from?&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://gtlpython.click/img/about/home.jpg&#34; alt=&#34;my_home&#34;&gt;&#xA;I grew up in Clinton, Mississippi USA.&lt;/p&gt;&#xA;&#xA;&lt;div style=&#34;text-align: center;&#34;&gt;&#xA;    &lt;p&gt;&#xA;        Download here: &lt;a href=&#34;https://gtlpython.click/zip_files/code.zip&#34; download&gt;Download the ZIP file&lt;/a&gt;&#xA;    &lt;/p&gt;</description>
    </item>
  </channel>
</rss>
